#include "WiFi.h"
#include "SPIFFS.h"
#include "ESPAsyncWebServer.h"

// Replace with your network credentials
const char* ssid     = "Shweta";
const char* password = "";

// Set web server port number to 80
AsyncWebServer servers(90);
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String redState = "off";
String greenState = "off";

// Assign output variables to GPIO pins
const int output4 = 4;
const int output18 = 18;

void setup() {
  Serial.begin(115200);
  //Initialize the output variables as outputs
  if(!SPIFFS.begin()){
      Serial.println("An Error has occurred while mounting SPIFFS");
       return;
  }
  //WiFi.begin(ssid, password);
  //while (WiFi.status() != WL_CONNECTED) {
    //delay(1000);
    //Serial.println("Connecting to WiFi..");
  //}
 
 // Serial.println(WiFi.localIP());
 
  pinMode(output4, OUTPUT);
  pinMode(output18, OUTPUT);
  // Set outputs to LOW
  digitalWrite(output4, LOW);
  digitalWrite(output18, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Setting AP (Access Point)…");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
  Serial.println(WiFi.localIP());
  //servers.on("/index", HTTP_GET, [](AsyncWebServerRequest *request){
  //request->send(SPIFFS, "/index.html", "text/html");
  //});
  //servers.on("/index.css", HTTP_GET, [](AsyncWebServerRequest *request){
  //  request->send(SPIFFS, "/index.css", "text/css");
 // });
  servers.on("/img", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(SPIFFS, "/bg.jpg", "image/jpeg");
  });
  server.begin();
  servers.begin();
}

void loop(){
 WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // turns the GPIOs on and off
             if (header.indexOf("GET /on2") >= 0) {
              Serial.println("Green LED on");
              greenState = "on";
              digitalWrite(18, HIGH);
            } else if (header.indexOf("GET /off2") >= 0) {
              Serial.println("Green LED off");
              greenState = "off";
              digitalWrite(18, LOW);
            }
            else if (header.indexOf("GET /on") >= 0) {
              Serial.println("Red LED state on");
              redState = "on";
              digitalWrite(4, HIGH);
            } else if (header.indexOf("GET /off") >= 0) {
              Serial.println("Red LED off");
              redState = "off";
              digitalWrite(4, LOW);
            } 
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".redbutton { background-color: #ff000d; border: none; color: white; padding: 16px 40px;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;}");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");
            
            // Web Page Heading
            client.println("<body background = \"http://192.168.4.1:90/img\"><h1>Control the Lights (Assignment 2)</h1>");
            
            // Display current state, and ON/OFF buttons for GPIO 26  
            client.println("<p>Red - State " + redState + "</p>");
            // If the output26State is off, it displays the ON button       
            if (redState=="off") {
              client.println("<p><a href=\"/on\"><button class=\"redbutton\">TURN ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/off\"><button class=\"redbutton\">TURN OFF</button></a></p>");
            } 
               
            // Display current state, and ON/OFF buttons for GPIO 27  
            client.println("<p>Green - State " + greenState + "</p>");
            // If the output27State is off, it displays the ON button       
            if (greenState=="off") {
              client.println("<p><a href=\"/on2\"><button class=\"button\">TURN ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/off2\"><button class=\"button button2\">TURN OFF</button></a></p>");
            }
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}